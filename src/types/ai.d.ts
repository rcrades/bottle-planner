/**
 * Type declarations for ai (Vercel AI SDK)
 */

declare module 'ai' {
  /**
   * Generate text using a language model
   */
  export function generateText(options: GenerateTextOptions): Promise<GenerateTextResult>;

  /**
   * Stream text generated by a language model
   */
  export function streamText(options: GenerateTextOptions): Promise<StreamResult>;

  /**
   * Generate a structured object using a language model
   */
  export function generateObject<T>(options: GenerateObjectOptions): Promise<GenerateObjectResult<T>>;

  /**
   * Stream a structured object generated by a language model
   */
  export function streamObject<T>(options: GenerateObjectOptions): Promise<StreamObjectResult<T>>;

  /**
   * Options for generating text
   */
  interface GenerateTextOptions {
    model: any;
    prompt?: string;
    messages?: Message[];
    maxTokens?: number;
    temperature?: number;
    topP?: number;
    frequencyPenalty?: number;
    presencePenalty?: number;
    stop?: string | string[];
    tools?: Record<string, any>;
    providerOptions?: Record<string, any>;
  }

  /**
   * Message object for chat-based models
   */
  interface Message {
    role: 'user' | 'assistant' | 'system';
    content: string | MessageContent[];
  }

  /**
   * Content for multimodal messages
   */
  type MessageContent = 
    | { type: 'text'; text: string }
    | { type: 'image'; image: string }
    | { type: 'file'; data: any; mimeType: string; filename?: string };

  /**
   * Result of generating text
   */
  interface GenerateTextResult {
    text: string;
    usage?: {
      promptTokens: number;
      completionTokens: number;
      totalTokens: number;
    };
    providerMetadata?: Record<string, any>;
    sources?: SourceInfo[];
  }

  /**
   * Result of streaming operations
   */
  interface StreamResult {
    text: string;
    done: boolean;
    providerMetadata?: Promise<Record<string, any>>;
    sources?: SourceInfo[];
  }

  /**
   * Source information for responses with citations
   */
  interface SourceInfo {
    url: string;
    title?: string;
    text?: string;
    date?: string;
  }

  /**
   * Options for generating structured objects
   */
  interface GenerateObjectOptions {
    model: any;
    schema: any;
    schemaName?: string;
    schemaDescription?: string;
    prompt?: string;
    messages?: Message[];
    temperature?: number;
    maxTokens?: number;
    providerOptions?: Record<string, any>;
  }

  /**
   * Result of generating a structured object
   */
  interface GenerateObjectResult<T> {
    object: T;
    usage?: {
      promptTokens: number;
      completionTokens: number;
      totalTokens: number;
    };
    providerMetadata?: Record<string, any>;
  }

  /**
   * Result of streaming a structured object
   */
  interface StreamObjectResult<T> {
    object: T;
    done: boolean;
    providerMetadata?: Promise<Record<string, any>>;
  }
} 